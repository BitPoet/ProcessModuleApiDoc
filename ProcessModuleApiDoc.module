<?php namespace ProcessWire;

/**
 * Module Api Doc Viewer
 *
 * Copyright 2021 by BitPoet
 * https://github.com/BitPoet
 *
 * Licensed under the MIT license.
 * https://raw.githubusercontent.com/BitPoet/ProcessModuleApiDoc/main/LICENSE
 *
 * This module relies on composer package PHP-Parser which needs to be installed from the command line.
 * https://github.com/nikic/PHP-Parser
 * PHP-Parser is licensed under the terms of the BSD 3-Clause "New" or "Revised" License.
 *
 * ToDo:
 * This module could do with separating code and HTML.
 */
 
class ProcessModuleApiDoc extends Process implements ConfigurableModule {

	protected $seenPaths = [];
	protected $uninstalled = [];
	
	protected $fileDocLinkTemplate = "<a class='fa fa-file-text-o' href='%sview?module=%s&filename=%s' title='%s'> </a>";

	public static function getModuleInfo() {
		return [
			"title"			=>	__("Module Api Doc Viewer", __FILE__),
			"summary"		=>	__("Generate and view PHPDoc style documentation for site modules", __FILE__),
			"version"		=>	"0.0.8",
			"requires"		=>	["TextformatterMarkdownExtra", "ProcessWire>=3.0.127"],
			"icon"			=>	'file-text-o',
			"page"			=>	[
				"name"			=>	"moduledoc",
				"parent"		=>	"setup",
				"title"			=>	"Module API Docs",
			]
		];
	}
	
	/**
	 * Module initialization
	 *
	 * Loads JqueryWireTabs and fills header templates for MarkupAdminDataTable
	 */
	public function init() {
		parent::init();
		$this->wire('modules')->get("JqueryWireTabs");
		
		$this->set("headerTemplateModules", [
			$this->_("Module"),
			$this->_("Title"),
			$this->_("Version"),
			$this->_("Action")
		]);
		$this->set("headerTemplateFiles", [
			$this->_("File"),
			$this->_("Action")
		]);
		$this->set("headerTemplateMethods", [
			$this->_("Property"),
			$this->_("Static"),
			$this->_("Description")
		]);
		$this->set("headerTemplateFunctions", [
			$this->_("Function"),
			$this->_("Description")
		]);
	}

	/**
	 * Render the documentation link for the passed class / filename with the passed hover title
	 */
	protected function docLink($classname, $filename, $title) {
		return sprintf(
			$this->fileDocLinkTemplate,
			$this->page->url,
			rawurlencode($classname),
			rawurlencode($filename),
			$title
		);
	}

	/**
	 * Default handler for Process
	 *
	 * Outputs an overview of installed modules and core classes along with links to the docs.
	 *
	 * @return string HTML
	 */
	public function ___execute() {
		
		// Installed Modules
		$fMods = $this->wrapInputfieldMarkup("installedmodules", $this->buildModulesTable());
		// Uninstalled Modules
		$uMods = $this->wrapInputfieldMarkup("uninstalledmodules", $this->buildUninstalledModulesTable());
		// Core Classes
		$fCore = $this->wrapInputfieldMarkup("coreclasses", $this->buildCoreTable());
		// Template Files
		$fTpls = $this->wrapInputfieldMarkup("templatefiles", $this->buildTemplatesTable($this->input->get->recurse));

		return $this->modules->get('JqueryWireTabs')->render([
			$this->_("Installed Modules")		=>	$fMods->render(),
			$this->_("Uninstalled Modules")		=>	$uMods->render(),
			$this->_("Core Classes")			=>	$fCore->render(),
			$this->_("Template Files")			=>	$fTpls->render()
		]);
	}
	
	/**
	 * Helper method to wrap the passed HTML snipped in an InputfieldMarkup
	 */
	protected function wrapInputfieldMarkup($name, $html) {
		$f = $this->wire('modules')->get("InputfieldMarkup");
		$f->attr('name', $name);
		$f->attr('value', $html);
		return $f;
	}
	
	/**
	 * Render tables for installed site and core modules
	 */
	public function ___buildModulesTable() {
		
		$out = "";
		$siteModules = [];
		$wireModules = [];

		foreach($this->modules as $module) {
			if($this->modules->isInstalled($module)) {
				$info = $this->modules->getModuleInfo($module);
				$className = $module->className();
				if(strpos($this->config->paths->$className, $this->config->paths->siteModules) === 0) {
					$siteModules[$className] = $info;
				} else {
					$wireModules[$className] = $info;
				}
				$this->seenPaths[] = $this->config->paths->$className;
			}
		}
		
		ksort($siteModules);
		ksort($wireModules);

		$out .= "<p> </p><div style='border: 1px solid gray; padding: 0.5em;'>" .
				"<p>" . $this->_("Click on the sheet symbol to the right of a class to view an on-the-fly generated documentation for the module.") . "</p>" .
				"<p>" . $this->_("Once there, you can also view the documentation for other PHP / module files in the same directory.") . "</p>" .
				"</div>";
		
		$out .= "<h2>" . $this->_("Site Modules") . "</h2>";
		
		$tbl = $this->modules->get("MarkupAdminDataTable");
		$tbl->setEncodeEntities(false);
		$tbl->headerRow($this->headerTemplateModules);
		
		foreach($siteModules as $className => $info) {
			$tbl->row([ $className, $info['title'], $info['version'], $this->docLink($className, '', $this->_("View")) ]);
		}

		$out .= $tbl->render();

		$out .= "<h2>" . $this->_("Wire (Core) Modules") . "</h2>";
		
		$tbl = $this->modules->get("MarkupAdminDataTable");
		$tbl->setEncodeEntities(false);
		$tbl->headerRow($this->headerTemplateModules);
		
		foreach($wireModules as $className => $info) {
			$tbl->row([	$className,	$info['title'],	$info['version'], $this->docLink($className, '', $this->_("View")) ]);
		}
		
		$out .= $tbl->render();
		
		return $out;
	}
	
	/**
	 * Render tables for not installed site and core modules
	 */
	public function ___buildUninstalledModulesTable() {
		
		$out = "";

		$siteModules = $this->getFilesRecursive($this->config->paths->siteModules, ".module");
		$coreModules = $this->getFilesRecursive($this->config->paths->modules, ".module");
		ksort($siteModules);
		ksort($coreModules);
		
		// Site modules
		$out .= "<h2>" . $this->_("Site Modules") . "</h2>";
		
		$tbl = $this->modules->get("MarkupAdminDataTable");
		$tbl->setEncodeEntities(false);		
		$tbl->headerRow($this->headerTemplateFiles);
		
		foreach($siteModules as $className => $info) {
			$tbl->row([ $className, $this->docLink($info, $className, $this->_("View")) ]);
		}
		
		$out .= $tbl->render();
		
		// Core modules
		$out .= "<h2>" . $this->_("Core Modules") . "</h2>";
		
		$tbl = $this->modules->get("MarkupAdminDataTable");
		$tbl->setEncodeEntities(false);		
		$tbl->headerRow($this->headerTemplateFiles);
		
		foreach($coreModules as $className => $info) {
			$tbl->row([
				$className,
				$this->docLink($info, $className, $this->_("View"))
			]);
		}
		
		$out .= $tbl->render();
		
		return $out;
	}
	
	/**
	 * Recursively read all filenames with the given ending from the given path
	 *
	 * Returns an associative array:
	 * ```php
	 * [
	 *   "filename1" => "path1",
	 *   "filename2" => "path2",
	 *   ...
	 * ];
	 * ```
	 */
	protected function getFilesRecursive($path, $ending) {
		
		$files = [];
		$directory = new \RecursiveDirectoryIterator($path);
		$iterator = new \RecursiveIteratorIterator($directory);

		foreach ($iterator as $info) {
			
			if($info->isDir() || substr(strtolower($info->getFilename()), -1 * strlen($ending)) !== strtolower($ending))
				continue;
			
			$path = $info->getPath() . "/";
			
			if(strtolower(substr($_SERVER['OS'], 0, 3)) === 'win')
				$path = str_replace('\\', '/', $path);
			
			if(in_array($path, $this->seenPaths))
				continue;
			
			$files[$info->getFilename()] = $path;
		}
		
		return $files;
	}
	
	/**
	 * Recursively read all filenames with the given ending from the given path
	 *
	 * The returned array is sorted by filenames by default.
	 * If argument $sortpath is true, it is sorted by path first, then by filename.
	 *
	 * Returns an array of arrays:
	 * ```php
	 * [
	 *   ["path1", "filename1"],
	 *   ["path2", "filename2"],
	 *   ...
	 * ];
	 * ```
	 */
	protected function getDirectoryFilesRecursive($path, $ending, $sortpath = false) {
		
		$files = [];
		
		$directory = new \RecursiveDirectoryIterator($this->config->paths->templates);
		$iterator = new \RecursiveIteratorIterator($directory);

		foreach ($iterator as $info) {
			
			if($info->isDir() || substr(strtolower($info->getFilename()), -1 * strlen($ending)) !== strtolower($ending))
				continue;
			
			$path = $info->getPath() . "/";
			
			if(strtolower(substr($_SERVER['OS'], 0, 3)) === 'win')
				$path = str_replace('\\', '/', $path);
			
			$files[] = [$path, $info->getFilename()];
		}

		return $files;
	}
	
	/**
	 * Render the table of template files
	 */
	public function ___buildTemplatesTable($recursive = false) {
		
		$files = [];
		
		if($recursive)
			$files = $this->getDirectoryFilesRecursive($this->config->paths->templates, ".php", true);
		else
			$files = $this->getDirectoryFilesFlat($this->config->paths->templates, ".php");
		
		$tbl = $this->modules->get("MarkupAdminDataTable");
		$tbl->setEncodeEntities(false);
		
		$tbl->headerRow([
			$this->_("File"),
			$this->_("Action")
		]);

		$oldPath = "";
		
		foreach($files as $f) {
			if($oldPath !== $f[0]) {
				$tbl->row([
					$this->_("Path") . ": " . $f[0],
					''
				], ['class' => 'rowdarker']);
			}
			$tbl->row([
				$f[1],
				$this->docLink($f[0], $f[1], $this->_("View"))
			]);
			$oldPath = $f[0];
		}

		return $tbl->render();
	}
	
	/**
	 * Renders the table for core files (wire/core directory)
	 */
	public function ___buildCoreTable() {
		$out = "";
		
		$files = $this->getDirectoryFilesFlat($this->config->paths->core, '.php');

		$tbl = $this->modules->get("MarkupAdminDataTable");
		$tbl->setEncodeEntities(false);
		
		$tbl->headerRow($this->headerTemplateFiles);
		
		foreach($files as $f) {
			$tbl->row([ $f[1], $this->docLink('CORE', $f[1], $this->_("View")) ]);
		}
		
		$out .= $tbl->render();
		
		return $out;
	}
	
	/**
	 * Read all filenames with the given ending from the given path
	 *
	 * This method does not recurse into subdirectories.
	 *
	 * The returned array is sorted by filenames.
	 *
	 * Returns an array of arrays:
	 * ```php
	 * [
	 *   ["path1", "filename1"],
	 *   ["path2", "filename2"],
	 *   ...
	 * ];
	 * ```
	 */
	protected function getDirectoryFilesFlat($path, $ending) {
		$files = [];
		
		$dir = opendir($path);
		while(($file = readdir($dir)) !== false) {
			if(substr($file, 0, 1) == '.' || ! is_file($path . $file) || ! preg_match('/\\.php$/i', $file))
				continue;
			$files[] = [$path, $file];
		}
		
		$this->sortFilesArrayName($files);
		
		return $files;
	}
	
	/**
	 * Sorts the passed array by the second element
	 */
	protected function sortFilesArrayName(&$arr) {
		uasort($arr, function($a, $b) {
			return strnatcmp($a[1], $b[1]);
		});
	}

	/**
	 * Sorts the passed array by the first, then by the second element
	 */
	protected function sortFilesArrayPathFirst(&$arr) {
		uasort($arr, function($a, $b) {
			$ord = strnatcmp($a[0], $b[0]);
			if($ord === 0) {
				$ord = strnatcmp($a[1], $b[1]);
			}
			return $ord;
		});
	}
	
	/**
	 * Renders the documentation for the given module or PHP file
	 */
	public function ___executeView() {

		require('ModuleApiDocGenerator.php');

		$out = "";

		$moduleName = $this->input->get->module;
		$moduleFile = $this->input->get->filename;
		
		if($moduleName === "CORE") {
			$modulePath = $this->config->paths->core;
			$path = $modulePath . $moduleFile;
		} else {
			if(strpos($moduleName, '/') !== false && $moduleFile) {
				$modulePath = $moduleName;
				$path = $moduleName . $moduleFile;
			} else {
				$modulePath = $this->config->paths->$moduleName;
				if($moduleFile) {
					$path = $this->config->paths->$moduleName . $moduleFile;
				} else {
					$path = $this->modules->getModuleFile($moduleName);
				}
			}
		}
		
		if(!$path) {
			return '<p><span class="fa fa-exclamation"> </span> ' . $this->_('Error: the module file could not be found!') . '</span></p>';
		}
		
		$out .= "<h4>" . sprintf($this->_("Viewing Documentation for File %s"), $path) . "</h4>";
		
		$otherfiles = [];
		
		if($moduleName !== "CORE") {
			$dir = opendir($modulePath);
			while(($file = readdir($dir)) !== false) {
				if(
					is_file($modulePath . $file)
					&& preg_match('/(php|module)$/i', $file)
					&& $file !== $moduleFile
					&& !($moduleFile == null && substr($path, -1 * strlen($file)) == $file)
				) {
					$otherfiles[] = $file;
				}
			}
		}
				
		if($otherfiles) {
			$out .= "<div><h4>" . $this->_("Other PHP files in this module's path") . "</h4><ul>";
			foreach($otherfiles as $file) {
				$out .= "<li><a href='{$this->page->url}view?module={$moduleName}&filename={$file}'>{$file}</a></li>";
			}
			$out .= "</ul></div>";
		}
		
		$gen = new ModuleApiDocGenerator($path);
		$gen->parse();
		
		$tfMd = $this->modules->get('TextformatterMarkdownExtra');
		
		$doc = $gen->buildDoc();
		foreach($doc as $name => $cls) {
			
			if($name === "NOCLASS") {
				// These are functions defined without a surrounding class
				$out .= '<h2>' . $this->_("Generated Documentation for File") . '</h2>';
				
				$clsParsed = $cls["parsedComment"];
				if($clsParsed) {
					$out .=  "<div style='border: 1px solid gray; padding: 0.5em;' class='markdown-wrap'>";
					if($clsParsed["summary"]) {
						$out .= "<h3>" . htmlentities($clsParsed["summary"]) . "</h3>";
					}
					if($clsParsed["description"]) {
						$out .= "" . $tfMd->markdown($clsParsed["description"]) . "";
					}
					$out .= "</div>";
				}

				$out .= "<h3>" . $this->_("Functions") . "</h3>";
				
				if(count($cls["functions"])) {
					
					$tbl = $this->modules->get("MarkupAdminDataTable");
					$tbl->setEncodeEntities(false);
					$tbl->headerRow($this->headerTemplateFunctions);
					
					foreach($cls["functions"] as $func) {
						$parsed = $func["parsedComment"];
						$tbl->row([
							$this->strong($func["name"]) . "( " . $this->renderArgString($func["params"]) . " )",
							$this->renderComment($parsed, $tfMd)
						], ['separator' => true, 'class' => 'rowdarker']);
						
					}
					$out .= $tbl->render();
				}
				
			} else {
				// A regular class
				$out .= '<h2>' . $this->_("Generated Documentation for Class") .': ' . $cls["namespace"] . '\\' . $name . '</h2>';
				
				$clsParsed = $cls["parsedComment"];
				if($clsParsed) {
					$out .=  "<div style='border: 1px solid gray; padding: 0.5em;' class='markdown-wrap'>";
					if($clsParsed["summary"]) {
						$out .= "<h3>" . htmlentities($clsParsed["summary"]) . "</h3>";
					}
					if($clsParsed["description"]) {
						$out .= "" . $tfMd->markdown($clsParsed["description"]) . "";
					}
					$out .= "</div>";
				}
							
				$out .= "<h3>" . $this->_("Properties") . "</h3>";
				if(count($cls["properties"])) {
					$tbl = $this->modules->get("MarkupAdminDataTable");
					$tbl->setEncodeEntities(false);
					$tbl->headerRow($this->headerTemplateMethods);
					
					foreach($cls["properties"] as $prop) {
						
						if($prop["visibility"] != "public") continue;
						
						$parsed = $prop["parsedComment"];
						$tbl = $tbl->row([
							'<strong>$' . $prop["name"] . "</strong>",
							$prop["scope"],
							$this->renderComment($parsed, $tfMd)
						], ['separator' => true, 'class' => 'rowdarker']);
					}
					$out .= $tbl->render();
				} else {
					$out .= "<p>" . $this->_("No properties defined") . "</p>";
				}
				
				$hooks = [];

				$out .= "<h3>" . $this->_("Methods") . "</h3>";
				
				$tbl = $this->modules->get("MarkupAdminDataTable");
				$tbl->setEncodeEntities(false);
				$tbl->headerRow($this->headerTemplateMethods);
				
				foreach($cls["methods"] as $meth) {
					
					if($meth["visibility"] != "public") continue;
					if(substr($meth["name"], 0, 3) == '___') {
						$hooks[] = $meth;
						continue;
					}

					$parsed = $meth["parsedComment"];
					$tbl->row([
						$this->strong($meth["name"]) . "( " . $this->renderArgString($meth["params"]) . " )",
						$meth["scope"],
						$this->renderComment($parsed, $tfMd)
					], ['separator' => true, 'class' => 'rowdarker']);
					
					if($parsed && $parsed["returns"] && $parsed["returns"]["type"] ) {
						$ret = $parsed["returns"];
						$tbl->row([
							'',
							$this->_("returns:"),
							$ret["type"] . " " . $this->em($ret["text"])
						]);
					}
					
					if($parsed && $parsed["params"] && count($parsed["params"]) > 0) {
						foreach($parsed["params"] as $prm) {
							$tbl->row([
								'',
								$this->_("argument:"),
								" " . $this->em($prm["type"]) . " <span style='color: blue;'>" . $prm["name"] . "</span>" . ($prm["text"] ? " - " . $prm["text"] : "")
							]);
						}
					}
				}
				$out .= $tbl->render();

				if(count($hooks)) {
					$out .= "<h3>" . $this->_("Hookable Methods") . "</h3>";
					$tbl = $this->modules->get("MarkupAdminDataTable");
					$tbl->setEncodeEntities(false);
					$tbl->headerRow([
						$this->_("Method"),
						$this->_("Static"),
						$this->_("Description")
					]);
					foreach($hooks as $meth) {
						
						$parsed = $meth["parsedComment"];
						$tbl->row([
							$this->strong(substr($meth["name"], 3)) . "( " . $this->renderArgString($meth["params"]) . " )",
							$meth["scope"],
							$this->renderComment($parsed, $tfMd)
						], ['separator' => true, 'class' => 'rowdarker']);

						if($parsed && $parsed["returns"] && $parsed["returns"]["type"] ) {
							$tbl->row([
								'',
								$this->_("return:"),
								$parsed["returns"]["type"] . " " . $this->em($parsed["returns"]["text"])
							]);
						}
						
						if($parsed && $parsed["params"] && count($parsed["params"]) > 0) {
							foreach($parsed["params"] as $prm) {
								$tbl->row([
									'',
									$this->_("argument:"),
									" " .$this->em($prm["type"]) . " <span style='color: blue;'>" . $prm["name"] . "</span>" . ($prm["text"] ? " - " . $prm["text"] : "")
								]);
							}
						}
					}
					$out .= $tbl->render();
				}

				$out .= $this->renderTodoList($clsParsed, $tfMd);
			}
		}
		
		return $out;
	}
	
	/**
	 * Render the list of todos from the parsed comment
	 */
	protected function renderTodoList($parsed, TextformatterMarkdownExtra $tfMd) {
		
		if(! $parsed || !$parsed["todo"])
			return "";
		
		$out = "<div class='mad-toto'>";
		$out .= "<h3>" . $this->_("Open todos") . "</h3>";
		$out .= "<ul>";
		
		foreach($parsed["todo"] as $line) {
			$out .= "<li>" . $tfMd->markdown(htmlentities($line)) . "</li>";
		}
		
		$out .= "</ul>";
		$out .= "</div>";
		
		return $out;
	}
	
	/**
	 * Wrap the given HTML snippet in <strong> tags
	 */
	protected function strong($str) {
		return "<strong>$str</strong>";
	}
	
	/**
	 * Wrap the given HTML snippet in <em> tags
	 */
	protected function em($str) {
		return "<em>$str</em>";
	}
	
	/**
	 * Renders the parsed comment's summary and description
	 */
	protected function renderComment($parsed, TextFormatterMarkdownExtra $tfMd) {
		$out = "";
		if($parsed) {
			$out .= "<p>" . htmlentities($parsed["summary"]) . "</p>";
			if($parsed["description"]) {
				$out .= "<p style='white-space: pre-line;'>" . $tfMd->markdown($parsed["description"]) . "</p>";
			}
		}
		return $out;
	}
	
	/**
	 * Renders the parsed argument definitions for use in a method signature
	 */
	protected function renderArgString($params) {
		return implode(', ', array_map(
			function($param) {
				return $this->em($param["type"]) .
					   ' <span style="color: blue;">$' . $param["name"] . "</span>" . ($param["default"] ? " = " . $param["default"] : "");
			},
			$params
		));
	}
	
	/**
	 * We only output a notice on the configuration page that PHP-Parser is needed to run this module
	 */
	public static function getModuleConfigInputfields($data) {
		$wrap = new InputfieldWrapper();
		
		$f = wire('modules')->get("InputfieldMarkup");
		$f->title = __("Install php-parser before usage!", __FILE__);
		$f->attr(
			'value',
			__("Before using this module, you have to go into the module directory in a shell and execute 'composer update'.", __FILE__) . "\n"
			. sprintf(__("This will install the necessary [PHP-Parser](%s) package.", __FILE__), "https://github.com/nikic/PHP-Parser") . "\n"
			. "\n"
			. __("It is recommended to install this module in *development environments* only!")
		);
		$f->set("textformatters", ["TextformatterMarkdownExtra"]);
		
		$wrap->append($f);
		
		return $wrap;
	}
	
}
